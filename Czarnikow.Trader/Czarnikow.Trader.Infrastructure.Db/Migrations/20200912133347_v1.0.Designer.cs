// <auto-generated />
using System;
using Czarnikow.Trader.Infrastructure.Db.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Czarnikow.Trader.Infrastructure.Db.Migrations
{
    [DbContext(typeof(TraderDbContext))]
    [Migration("20200912133347_v1.0")]
    partial class v10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Czarnikow.Trader.Core.Domain.Counterparty", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CounterpartyId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id")
                        .HasName("PK_Counterparty");

                    b.HasAlternateKey("Name");

                    b.ToTable("Counterparty");

                    b.HasCheckConstraint("CK_Name", "LEN(Name) > 0");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Company A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Company B"
                        });
                });

            modelBuilder.Entity("Czarnikow.Trader.Core.Domain.Trade", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TradeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("CHAR(1)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Trade");

                    b.HasIndex("CounterpartyId");

                    b.ToTable("Trade");

                    b.HasCheckConstraint("CK_Product", "LEN(Product) > 0");

                    b.HasCheckConstraint("CK_Quantity", "Quantity >= 0");

                    b.HasCheckConstraint("CK_Price", "Price >= 0");

                    b.HasCheckConstraint("CK_Direction", "Direction = 'B' OR Direction = 'S'");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CounterpartyId = 1,
                            Date = new DateTime(2018, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Direction = "B",
                            Price = 400.50m,
                            Product = "Sugar",
                            Quantity = 100
                        },
                        new
                        {
                            Id = 2,
                            CounterpartyId = 2,
                            Date = new DateTime(2018, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Direction = "S",
                            Price = 450.10m,
                            Product = "Sugar",
                            Quantity = 100
                        });
                });

            modelBuilder.Entity("Czarnikow.Trader.Core.Domain.Trade", b =>
                {
                    b.HasOne("Czarnikow.Trader.Core.Domain.Counterparty", "Counterparty")
                        .WithMany()
                        .HasForeignKey("CounterpartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
